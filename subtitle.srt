1
00:00:06  --> 00:00:09 
Hello and welcome to this class. 

2
00:00:09  --> 00:00:14 
In the previous class, we defined how this pipeline is started by defining the trigger step. 

3
00:00:14  --> 00:00:26 
Now that we know this pipeline will be published as an API, we want to use the code attribute from the request to retrieve from a database the respective customer record associated with this value. 

4
00:00:26  --> 00:00:47 
To access a relational database like my SQL, Oracle SQL Server and others, we will use DB connector V2. With this connector you don't have to worry about downloading plugins or external drivers, nor about version compatibility with the various supported databases. The connector is responsible for abstracting this complexity and you only need to worry about. 

5
00:00:47  --> 00:00:50 
Some minimal settings for using this technology. 

6
00:00:50  --> 00:00:58 
When opening this technology configuration form, we will need to choose whether we are executing a query or a procedure for our lab. 

7
00:00:58  --> 00:01:00 
We will use a query. 

8
00:01:00  --> 00:01:08 
In addition, we need to define the access credentials, username and password in order to connect to the database. 

9
00:01:08  --> 00:01:14 
On the platform, these credentials must be previously registered in the settings screen under the name of accounts. 

10
00:01:14  --> 00:01:25 
Another important highlight is that once registered, these passwords are kept securely encrypted into a password vault and will not be visible to users. 

11
00:01:25  --> 00:01:28 
This information can also be defined for both environments. 

12
00:01:28  --> 00:01:31 
Test and production. 

13
00:01:31  --> 00:01:36 
The next configuration item is the connection string, which will allow us to connect to the desired database. 

14
00:01:36  --> 00:01:45 
Although we can fill this information directly into the component, the best practice is to store this information in a global variable. 

15
00:01:45  --> 00:01:53 
As well as setting up accounts, global variables can be set for both test and production environment. 

16
00:01:53  --> 00:01:58 
To use a global variable, just select its name from the list on the right of the configuration form. 

17
00:01:58  --> 00:02:07 
This list is shown only when we click on the fields that allow its use. 

18
00:02:07  --> 00:02:15 
For this lab, select the variable my SQL DB V2. 

19
00:02:15  --> 00:02:19 
Finally, let's define the query that will be used in this case. 

20
00:02:19  --> 00:02:27 
We want to retrieve a customer record, so our query will be select all from customers. 

21
00:02:27  --> 00:02:36 
With the component connected to the trigger step, we can run the pipeline in development mode and check the result of the query execution in the database. 

22
00:02:36  --> 00:02:45 
For that we can click on play and when the processing finishes we can check the return of the pipeline in the lower right box of the execution console. 

23
00:02:45  --> 00:02:56 
Note that the data returned from the database has been converted to Jason format and this payload could be used as input data for a next component in this logic. 

24
00:02:56  --> 00:02:59 
We retrieved the records from the customer table as expected. 

25
00:02:59  --> 00:03:07 
However, our goal was to retrieve only the record whose code is equal to the value of the code attribute passed as a parameter to this service. 

26
00:03:07  --> 00:03:14 
For that we need to change the query to take into account the value of a variable, which in this case is the code attribute. 

27
00:03:14  --> 00:03:23 
DB provides an expression language that can be used in the development of pipelines precisely for cases like this where we need to access values from adjacent structure. 

28
00:03:23  --> 00:03:28 
This expression language we will call double braces. 

29
00:03:28  --> 00:03:38 
Double braces allow us to access global variable values, pipeline metadata and also provide a way to access the value of a Jason attribute. 

30
00:03:38  --> 00:03:46 
To access the code attribute value and use it as a parameter of the query that we are going to run, just use the following structure. 

31
00:03:46  --> 00:03:48 
Open the double braces. 

32
00:03:48  --> 00:03:57 
Use the reserved word message which will indicate that we are accessing the components input payload and then we navigate to the attribute using DOT notation. 

33
00:03:57  --> 00:04:04 
In our scenario, we will have message DOT query and path code and then we close the double braces. 

34
00:04:04  --> 00:04:20 
This expression language also allows us to use utility functions to, for example, add a check to validate whether the code field came empty or did not exist in the payload we are using, but for the purpose of this lab we will make accessing this value simpler. 

35
00:04:20  --> 00:04:35 
Now, with the connector properly configured, we can test our logic one more time and verify that the database is returned as just the record referring to the code we passed and no longer a list with all the records. 

36
00:04:35  --> 00:04:43 
However, if we use a code value whose record does not exist in the database, we will receive an empty list as an answer in the next class. 

37
00:04:43  --> 00:04:46 
We will deal with this scenario. 

38
00:04:46  --> 00:04:52 
We will use a conditional statement to return an informational message to the consumer of this service when no record is found. 

